title: Tasks
object:
  name: Task object
  attrs:
    - name: id
      value: 1234
      description: Task id
    - name: project_id
      value: 2345
      description: Tasks's project id
    - name: content
      value: My task
      description: Task content
    - name: completed
      value: true
      description: Flag to mark completed tasks
    - name: label_ids
      value: [124, 125, 128]
      description: Array of label ids, associated with a task
    - name: order
      value: 123
      description: Task order (read-only, position in project)
    - name: indent
      value: 1
      description: Task indentation level (read-only, value from 1 to 5)
    - name: priority
      value: 1
      description: task priority from 1 (normal, default value) to 4 (urgent)
    - name: due
      value: {"string": "tomorrow at 12", "date": "2016-09-01", "datetime": "2016-09-01T09:00:00Z", "date_lang": "en", "timezone": "Europe/Moscow"}
      description: >
        object representing task due date/time.
        	- `string` (string) — human defined date in arbitrary format;
        	- `date` (string) — date in format `YYYY-MM-DD` corrected to user's time
        	  zone;
        	- `datetime` (optional, string) — only returned if exact due time set
        	  (i.e. it's not a whole-day task), date and time in RFC3339 format in
        	  UTC;
        	- `timezone` (optional, string) — only returned if exact due time set,
        	  user's timezone definition either in tzdata-compatible format
        	  ("Europe/Berlin") or as a string specifying east of UTC offset as
        	  "UTC±HH:MM" (i.e. "UTC-01:00");
    - name: url
      value: "https://todoist.com/showTask?id=12345&sync_id=56789"
      description: URL to access this task in Todoist web interface
    - name: comment_count
      value: 10
      description: Number of task comments

endpoints:


  - name: Get all tasks
    verb: GET
    url: tasks
    get_args:
      - name: project_id
        description: Project id to filter
      - name: label_id
        description: Label id to filter
    returns: JSON-encoded array of all user tasks, optionally filtered by project or by label
    shell_sample: >
      curl -X GET "$root/tasks?token=$my_token&project_id=234"
    python_sample: >
      >>> print requests.get(root + "/tasks", args={"token": my_token, "project_id": 234}).json()
    output_sample: >
      [
        {
          "id": 123,
          "project_id": 234,
          "content": "Inbox",
          "comment_count": 10,
          "order": 1,
          "indent": 1,
          "priority": 1,
          "url": "https://todoist.com/showTask?id=123"
        }
      ]


  - name: Create new task
    verb: POST
    url: tasks
    post_attrs:
      - name: content
        description: Task content
      - name: project_id
        description: Task project id (optional). If not set, task is put to user's Inbox
      - name: order
        description: >
          non-zero integer value to set the "order" task field (optional,
          used by clients to sort tasks inside project)
      - name: label_ids
        description: ids of labels associated with the task (optional, list of integers)
      - name: priority
        description: optional priority value, from 1 (normal) to 4 (urgent)
      - name: due_string
        description: >
          Optional [human-defined](https://todoist.com/Help/DatesTimes)
          task due date (ex.: "next Monday", "Tomorrow", "every monday at 12:00").
          Value is set using local (not UTC) time.
      - name: due_date
        description: >
          Alternative optional way to set task due date. Should be the string
          in `YYYY-MM-DD`
      - name: due_datetime
        description: >
          Another optinal alternative to set a specific date and time in
          RFC3339 format in UTC;
      - name: due_lang
        description: >
          If value of `due_string` is not in English, this
          attribute can be provided with 2-letter code specifying the language.

    returns: newly created task
    shell_sample: >
      curl -X POST "$root/tasks?token=$my_token"
          --data '{"content": "Appointment with Maria", "project_id": 2345, "due_string": "tomorrow at 12:00", "due_lang": "en", "priority": 4}'
          -H "Content-Type: application/json"
          -H "X-Request-Id: 29290B91-F437-42EB-8AA9-C6814CAF16B5"
    python_sample: >
      requests.post(root + "/tasks",
          args={"token": my_token},
          data=json.dumps({"content": "Appointment with Maria",
                           "project_id": 2345,
                           "due_string": "tomorrow at 12:00",
                           "due_lang": "en",
                           "priority": 4}),
          headers={
              "Content-Type": "application/json",
              "X-Request-Id": "29290B91-F437-42EB-8AA9-C6814CAF16B5",
          }
      ).json()
    output_sample: >
      {
          "comment_count": 0,
          "completed": false,
          "content": "Appointment with Maria",
          "due": {
              "date": "2016-09-01",
              "datetime": "2016-09-01T11:00:00Z",
              "string": "2017-07-01 12:00",
              "timezone": "Europe/Lisbon"
          },
          "id": 123,
          "order": 20,
          "priority": 4,
          "project_id": 234,
          "url": "https://todoist.com/showTask?id=123"
      }

  - name: Get specific task
    verb: GET
    url: tasks/<task_id>
    returns: task by id
    shell_sample: >
      curl -X GET "$root/tasks/1234?token=$my_token"
    python_sample: >
      requests.get(root + "/tasks/1234", args={"token": my_token}).json()
    output_sample: >
      {
          "comment_count": 0,
          "completed": false,
          "content": "Appointment with Maria",
          "due": {
              "date": "2016-09-01",
              "datetime": "2016-09-01T11:00:00Z",
              "string": "2017-07-01 12:00",
              "timezone": "Europe/Lisbon"
          },
          "id": 123,
          "order": 20,
          "indent": 1,
          "priority": 4,
          "project_id": 234,
          "url": "https://todoist.com/showTask?id=123"
      }

  - name: Update specific task
    verb: POST
    url: tasks/<task_id>
    post_attrs:
      - name: content
        description: Task content
      - name: label_ids
        description: ids of labels associated with the task (optional, list of integers)
      - name: priority
        description: optional priority value, from 1 (normal) to 4 (urgent)
      - name: due_string
        description: >
          Optional [human-defined](https://todoist.com/Help/DatesTimes)
          task due date (ex.: "next Monday", "Tomorrow", "every monday at 12:00").
          Value is set using local (not UTC) time.
      - name: due_date
        description: >
          Alternative optional way to set task due date. Should be the string
          in `YYYY-MM-DD`
      - name: due_datetime
        description: >
          Another optinal alternative to set a specific date and time in
          RFC3339 format in UTC;
      - name: due_lang
        description: >
          If value of `due_string` is not in English, this
          attribute can be provided with 2-letter code specifying the language.

    returns: HTTP status code 204 and empty body
    shell_sample: >
      curl -X POST "$root/tasks/1234?token=$my_token"
          --data '{"name": "Movies to watch"}'
          -H "Content-Type: application/json"
          -H "X-Request-Id: 29290B91-F437-42EB-8AA9-C6814CAF16B5"
    python_sample: >
      requests.post(root + "/tasks/1234",
          args={"token": my_token},
          data=json.dumps({"name": "Movies to watch"}),
          headers={
              "Content-Type": "application/json",
              "X-Request-Id": "29290B91-F437-42EB-8AA9-C6814CAF16B5",
          }
      )

  - name: Close specifc task
    description: >
      The command does exactly what official clients do when you close a task: r
      egular task is completed and moved to history, subtask is checked
      (marked as done, but not moved to history), recurring task is moved
      forward (due date is updated)
    verb: POST
    url: tasks/<task_id>/close
    returns: HTTP status code 204 and empty body
    shell_sample: >
      curl -X POST "$root/tasks/1234/close?token=$my_token"
    python_sample: >
      requests.delete(root + "/tasks/1234/close", args={"token": my_token})


  - name: Reopen specific task
    description: >
      This command reopens a previously closed task. Works both with checked
      tasks in user's workspace and tasks moved to history. The behaviour varies
      for different types of tasks (the command follows the behaviour of
      official clients when tasks uncompleted or extracted from the history)


      - Regular tasks extracted from the history and added back to the workspace as normal unchecked tasks (without their subtasks though).

      - Completed subtasks of a non-completed task simply marked as uncompleted.

      - Moved to history subtasks added back to the workspace as first-level tasks.

      - Non-completed recurring tasks ignored.
    verb: POST
    url: tasks/<task_id>/reopen
    returns: >
      HTTP status code 204 and empty body if task was found, or 404 it task is not
      found either in workspace, or in history.
    shell_sample: >
      curl -X POST "$root/tasks/1234/reopen?token=$my_token"
    python_sample: >
      requests.delete(root + "/tasks/1234/reopen", args={"token": my_token})


  - name: Delete specific task
    verb: DELETE
    url: tasks/<task_id>
    returns: empty response
    shell_sample: >
      curl -X DELETE "$root/tasks/1234?token=$my_token"
    python_sample: >
      requests.delete(root + "/tasks/1234", args={"token": my_token})
